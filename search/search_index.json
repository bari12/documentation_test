{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Rucio's documentation! Rucio is a project that provides services and associated libraries for allowing scientific collaborations to manage large volumes of data spread across facilities at multiple institutions and organisations. Rucio has been developed by the ATLAS experiment . Rucio offers advanced features, is highly scalable, and modular. It is adata management solution that could cover the needs of different communities in the scientific domain (e.g., HEP, astronomy, biology). General Information This section contains the general information related to Rucio which is common to all developers, users, and operators. For documentation specific to any of these three, please see the subsequent sections. Concepts [replica_workflow] [architecture] [releasepolicy] [releasenotes] Developer Documentation If you want to develop with Rucio or contribute to the project, this part of the documentation is for you. [contributing] [developing] [rest] [api] [database] User Documentation [installing_clients] [cli_examples] [man/rucio] [man/rucio-admin] [rse_expressions] [clients] [advanced_usage] Operator Documentation [installing_server] [installing_daemons] [man/daemons] [monitoring] [policy_packages] Rucio Tutorial [demo_environment] [cli_examples] [cli_admin_examples] Authors [authors]","title":"Home"},{"location":"#welcome-to-rucios-documentation","text":"Rucio is a project that provides services and associated libraries for allowing scientific collaborations to manage large volumes of data spread across facilities at multiple institutions and organisations. Rucio has been developed by the ATLAS experiment . Rucio offers advanced features, is highly scalable, and modular. It is adata management solution that could cover the needs of different communities in the scientific domain (e.g., HEP, astronomy, biology).","title":"Welcome to Rucio's documentation!"},{"location":"#general-information","text":"This section contains the general information related to Rucio which is common to all developers, users, and operators. For documentation specific to any of these three, please see the subsequent sections. Concepts [replica_workflow] [architecture] [releasepolicy] [releasenotes]","title":"General Information"},{"location":"#developer-documentation","text":"If you want to develop with Rucio or contribute to the project, this part of the documentation is for you. [contributing] [developing] [rest] [api] [database]","title":"Developer Documentation"},{"location":"#user-documentation","text":"[installing_clients] [cli_examples] [man/rucio] [man/rucio-admin] [rse_expressions] [clients] [advanced_usage]","title":"User Documentation"},{"location":"#operator-documentation","text":"[installing_server] [installing_daemons] [man/daemons] [monitoring] [policy_packages]","title":"Operator Documentation"},{"location":"#rucio-tutorial","text":"[demo_environment] [cli_examples] [cli_admin_examples]","title":"Rucio Tutorial"},{"location":"#authors","text":"[authors]","title":"Authors"},{"location":"api/","text":"API Documentation blal bla asd Copyright European Organization for Nuclear Research (CERN) Licensed under the Apache License, Version 2.0 (the \"License\"); You may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Authors: - Vincent Garonne, vincent.garonne@cern.ch , 2012 - Martin Barisits, martin.barisits@cern.ch , 2013-2018 - Cedric Serfon, cedric.serfon@cern.ch , 2014-2015 - Andrew Lister, andrew.lister@stfc.ac.uk , 2019 PY3K COMPATIBLE add_replication_rule ( dids , copies , rse_expression , weight , lifetime , grouping , account , locked , subscription_id , source_replica_expression , activity , notify , purge_replicas , ignore_availability , comment , ask_approval , asynchronous , priority , split_container , meta , issuer ) Adds a replication rule. :param dids: The data identifier set. :param copies: The number of replicas. :param rse_expression: Boolean string expression to give the list of RSEs. :param weight: If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account. :param lifetime: The lifetime of the replication rules (in seconds). :param grouping: ALL - All files will be replicated to the same RSE. DATASET - All files in the same dataset will be replicated to the same RSE. NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all. :param account: The account owning the rule. :param locked: If the rule is locked, it cannot be deleted. :param subscription_id: The subscription_id, if the rule is created by a subscription. :param source_replica_expression: Only use replicas from this RSE as sources. :param activity: Activity to be passed on to the conveyor. :param notify: Notification setting of the rule. :purge purge_replicas: The purge setting to delete replicas immediately after rule deletion. :param ignore_availability: Option to ignore the availability of RSEs. :param comment: Comment about the rule. :param ask_approval: Ask for approval of this rule. :param asynchronous: Create rule asynchronously by judge-injector. :param priority: Priority of the transfers. :param split_container: Should a container rule be split into individual dataset rules. :param meta: WFMS metadata as a dictionary. :param issuer: The issuing account of this operation. :returns: List of created replication rules. delete_replication_rule ( rule_id , purge_replicas , issuer ) Deletes a replication rule and all associated locks. :param rule_id: The id of the rule to be deleted :param issuer: The issuing account of this operation :raises: RuleNotFound, AccessDenied examine_replication_rule ( rule_id ) Examine a replication rule. :param rule_id: The rule_id to get. get_replication_rule ( rule_id , estimate_ttc = None ) Get replication rule by it's id. :param rule_id: The rule_id to get. list_associated_replication_rules_for_file ( scope , name ) Lists associated replication rules by file. :param scope: Scope of the file.. :param name: Name of the file. list_replication_rule_full_history ( scope , name ) List the rule history of a DID. :param scope: The scope of the DID. :param name: The name of the DID. list_replication_rule_history ( rule_id ) Lists replication rule history.. :param rule_id: The rule_id to list. list_replication_rules ( filters = {}) Lists replication rules based on a filter. :param filters: dictionary of attributes by which the results should be filtered. move_replication_rule ( rule_id , rse_expression , issuer ) Move a replication rule to another RSE and, once done, delete the original one. :param rule_id: Rule to be moved. :param rse_expression: RSE expression of the new rule. :param session: The DB Session. :raises: RuleNotFound, RuleReplaceFailed reduce_replication_rule ( rule_id , copies , exclude_expression , issuer ) Reduce the number of copies for a rule by atomically replacing the rule. :param rule_id: Rule to be reduced. :param copies: Number of copies of the new rule. :param exclude_expression: RSE Expression of RSEs to exclude. :param issuer: The issuing account of this operation :raises: RuleReplaceFailed, RuleNotFound update_replication_rule ( rule_id , options , issuer ) Update lock state of a replication rule. :param rule_id: The rule_id to lock. :param options: Options dictionary. :param issuer: The issuing account of this operation :raises: RuleNotFound if no Rule can be found.","title":"API Documentation"},{"location":"api/#api-documentation","text":"blal bla asd","title":"API Documentation"},{"location":"api/#rucio.api.rule","text":"Copyright European Organization for Nuclear Research (CERN) Licensed under the Apache License, Version 2.0 (the \"License\"); You may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Authors: - Vincent Garonne, vincent.garonne@cern.ch , 2012 - Martin Barisits, martin.barisits@cern.ch , 2013-2018 - Cedric Serfon, cedric.serfon@cern.ch , 2014-2015 - Andrew Lister, andrew.lister@stfc.ac.uk , 2019 PY3K COMPATIBLE","title":"rucio.api.rule"},{"location":"api/#rucio.api.rule.add_replication_rule","text":"Adds a replication rule. :param dids: The data identifier set. :param copies: The number of replicas. :param rse_expression: Boolean string expression to give the list of RSEs. :param weight: If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account. :param lifetime: The lifetime of the replication rules (in seconds). :param grouping: ALL - All files will be replicated to the same RSE. DATASET - All files in the same dataset will be replicated to the same RSE. NONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all. :param account: The account owning the rule. :param locked: If the rule is locked, it cannot be deleted. :param subscription_id: The subscription_id, if the rule is created by a subscription. :param source_replica_expression: Only use replicas from this RSE as sources. :param activity: Activity to be passed on to the conveyor. :param notify: Notification setting of the rule. :purge purge_replicas: The purge setting to delete replicas immediately after rule deletion. :param ignore_availability: Option to ignore the availability of RSEs. :param comment: Comment about the rule. :param ask_approval: Ask for approval of this rule. :param asynchronous: Create rule asynchronously by judge-injector. :param priority: Priority of the transfers. :param split_container: Should a container rule be split into individual dataset rules. :param meta: WFMS metadata as a dictionary. :param issuer: The issuing account of this operation. :returns: List of created replication rules.","title":"add_replication_rule()"},{"location":"api/#rucio.api.rule.delete_replication_rule","text":"Deletes a replication rule and all associated locks. :param rule_id: The id of the rule to be deleted :param issuer: The issuing account of this operation :raises: RuleNotFound, AccessDenied","title":"delete_replication_rule()"},{"location":"api/#rucio.api.rule.examine_replication_rule","text":"Examine a replication rule. :param rule_id: The rule_id to get.","title":"examine_replication_rule()"},{"location":"api/#rucio.api.rule.get_replication_rule","text":"Get replication rule by it's id. :param rule_id: The rule_id to get.","title":"get_replication_rule()"},{"location":"api/#rucio.api.rule.list_associated_replication_rules_for_file","text":"Lists associated replication rules by file. :param scope: Scope of the file.. :param name: Name of the file.","title":"list_associated_replication_rules_for_file()"},{"location":"api/#rucio.api.rule.list_replication_rule_full_history","text":"List the rule history of a DID. :param scope: The scope of the DID. :param name: The name of the DID.","title":"list_replication_rule_full_history()"},{"location":"api/#rucio.api.rule.list_replication_rule_history","text":"Lists replication rule history.. :param rule_id: The rule_id to list.","title":"list_replication_rule_history()"},{"location":"api/#rucio.api.rule.list_replication_rules","text":"Lists replication rules based on a filter. :param filters: dictionary of attributes by which the results should be filtered.","title":"list_replication_rules()"},{"location":"api/#rucio.api.rule.move_replication_rule","text":"Move a replication rule to another RSE and, once done, delete the original one. :param rule_id: Rule to be moved. :param rse_expression: RSE expression of the new rule. :param session: The DB Session. :raises: RuleNotFound, RuleReplaceFailed","title":"move_replication_rule()"},{"location":"api/#rucio.api.rule.reduce_replication_rule","text":"Reduce the number of copies for a rule by atomically replacing the rule. :param rule_id: Rule to be reduced. :param copies: Number of copies of the new rule. :param exclude_expression: RSE Expression of RSEs to exclude. :param issuer: The issuing account of this operation :raises: RuleReplaceFailed, RuleNotFound","title":"reduce_replication_rule()"},{"location":"api/#rucio.api.rule.update_replication_rule","text":"Update lock state of a replication rule. :param rule_id: The rule_id to lock. :param options: Options dictionary. :param issuer: The issuing account of this operation :raises: RuleNotFound if no Rule can be found.","title":"update_replication_rule()"},{"location":"clients/","text":"Clients Documentation bla bla","title":"Clients Documentation"},{"location":"clients/#clients-documentation","text":"bla bla","title":"Clients Documentation"},{"location":"concepts/","text":"Rucio concepts","title":"Concepts"},{"location":"concepts/#rucio-concepts","text":"","title":"Rucio concepts"}]}